// <auto-generated />
using System;
using DbConnect.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbConnect.Web.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("DbConnect.Core.Models.AnalysisReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("InputSignature")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Kind", "InputSignature")
                        .IsUnique();

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("DbConnect.Core.Models.ColumnEssentialMetrics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AvgLength")
                        .HasColumnType("REAL");

                    b.Property<decimal?>("AvgNumeric")
                        .HasColumnType("TEXT");

                    b.Property<double>("CardinalityRate")
                        .HasColumnType("REAL");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("CompletenessRate")
                        .HasColumnType("REAL");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<long>("EmptyValues")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNullable")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("MaxDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MaxNumeric")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("MinDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MinLength")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MinNumeric")
                        .HasColumnType("TEXT");

                    b.Property<long>("NullValues")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("StdDevNumeric")
                        .HasColumnType("TEXT");

                    b.Property<int>("TableMetricsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TopValuesJson")
                        .HasColumnType("TEXT");

                    b.Property<long>("TotalValues")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UniqueValues")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TableMetricsId");

                    b.ToTable("ColumnEssentialMetrics");
                });

            modelBuilder.Entity("DbConnect.Core.Models.ColumnMetric", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CollectedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MetricValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchemaName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("dq_column_metrics");
                });

            modelBuilder.Entity("DbConnect.Core.Models.ConnectionProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Database")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HostOrFile")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Kind")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("DbConnect.Core.Models.CustomDataQualityRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChangeReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("Column")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Dimension")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("ExpectedPassRate")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLatestVersion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RuleId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("SqlCondition")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("UserId", "ProfileId", "Schema", "TableName", "RuleId", "IsLatestVersion")
                        .IsUnique()
                        .HasDatabaseName("IX_CustomDataQualityRule_UniqueLatestVersion")
                        .HasFilter("IsLatestVersion = 1");

                    b.HasIndex("UserId", "ProfileId", "Schema", "TableName", "RuleId", "Version")
                        .IsUnique()
                        .HasDatabaseName("IX_CustomDataQualityRule_UniqueRule");

                    b.ToTable("CustomDataQualityRules");
                });

            modelBuilder.Entity("DbConnect.Core.Models.DataQualityAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("DataQualityAnalyses");
                });

            modelBuilder.Entity("DbConnect.Core.Models.DataQualityResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("ActualPassRate")
                        .HasColumnType("REAL");

                    b.Property<int>("AnalysisId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Column")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Dimension")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExecutedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<double>("ExpectedPassRate")
                        .HasColumnType("REAL");

                    b.Property<long>("InvalidRecords")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RuleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SqlCondition")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("TotalRecords")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ValidRecords")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisId");

                    b.ToTable("DataQualityResults");
                });

            modelBuilder.Entity("DbConnect.Core.Models.PreflightResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Expectation")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResultData")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchemaName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SqlExecuted")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Success")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TableName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TestType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("dq_preflight_results");
                });

            modelBuilder.Entity("DbConnect.Core.Models.RuleCandidate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ApprovedByUser")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoGenerated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CheckSql")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ColumnName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dimension")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SchemaName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("dq_rule_candidates");
                });

            modelBuilder.Entity("DbConnect.Core.Models.RuleExecution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExecutionTimeMs")
                        .HasColumnType("INTEGER");

                    b.Property<long>("InvalidRecords")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RuleCandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Success")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TotalRecords")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ValidRecords")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RuleCandidateId");

                    b.ToTable("dq_rule_executions");
                });

            modelBuilder.Entity("DbConnect.Core.Models.TableEssentialMetrics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CollectedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ColumnsWithNulls")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DuplicateRows")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DuplicationRate")
                        .HasColumnType("REAL");

                    b.Property<long>("EstimatedSizeBytes")
                        .HasColumnType("INTEGER");

                    b.Property<double>("OverallCompleteness")
                        .HasColumnType("REAL");

                    b.Property<string>("PrimaryKeyColumns")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalColumns")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TotalRows")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("UserId", "ProfileId", "Schema", "TableName")
                        .HasDatabaseName("IX_TableEssentialMetrics_UniqueTable");

                    b.ToTable("TableEssentialMetrics");
                });

            modelBuilder.Entity("DbConnect.Core.Models.TableMetric", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CollectedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetricGroup")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MetricValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchemaName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("dq_table_metrics");
                });

            modelBuilder.Entity("DbConnect.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DbConnect.Core.Models.UserApiSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiKeyEncrypted")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastValidatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Provider")
                        .IsUnique();

                    b.ToTable("UserApiSettings");
                });

            modelBuilder.Entity("DbConnect.Core.Models.AnalysisReport", b =>
                {
                    b.HasOne("DbConnect.Core.Models.User", null)
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbConnect.Core.Models.ColumnEssentialMetrics", b =>
                {
                    b.HasOne("DbConnect.Core.Models.TableEssentialMetrics", "TableMetrics")
                        .WithMany("ColumnMetrics")
                        .HasForeignKey("TableMetricsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TableMetrics");
                });

            modelBuilder.Entity("DbConnect.Core.Models.ConnectionProfile", b =>
                {
                    b.HasOne("DbConnect.Core.Models.User", null)
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbConnect.Core.Models.CustomDataQualityRule", b =>
                {
                    b.HasOne("DbConnect.Core.Models.ConnectionProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbConnect.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DbConnect.Core.Models.DataQualityAnalysis", b =>
                {
                    b.HasOne("DbConnect.Core.Models.ConnectionProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbConnect.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DbConnect.Core.Models.DataQualityResult", b =>
                {
                    b.HasOne("DbConnect.Core.Models.DataQualityAnalysis", "Analysis")
                        .WithMany("Results")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysis");
                });

            modelBuilder.Entity("DbConnect.Core.Models.RuleExecution", b =>
                {
                    b.HasOne("DbConnect.Core.Models.RuleCandidate", "RuleCandidate")
                        .WithMany("Executions")
                        .HasForeignKey("RuleCandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RuleCandidate");
                });

            modelBuilder.Entity("DbConnect.Core.Models.TableEssentialMetrics", b =>
                {
                    b.HasOne("DbConnect.Core.Models.ConnectionProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbConnect.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DbConnect.Core.Models.UserApiSettings", b =>
                {
                    b.HasOne("DbConnect.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DbConnect.Core.Models.DataQualityAnalysis", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("DbConnect.Core.Models.RuleCandidate", b =>
                {
                    b.Navigation("Executions");
                });

            modelBuilder.Entity("DbConnect.Core.Models.TableEssentialMetrics", b =>
                {
                    b.Navigation("ColumnMetrics");
                });

            modelBuilder.Entity("DbConnect.Core.Models.User", b =>
                {
                    b.Navigation("Profiles");

                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
