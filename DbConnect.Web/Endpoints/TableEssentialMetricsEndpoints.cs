using DbConnect.Core.Models;
using DbConnect.Web.Data;
using DbConnect.Web.Services;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;

namespace DbConnect.Web.Endpoints;

public static class TableEssentialMetricsEndpoints
{
    public static void MapTableEssentialMetricsEndpoints(this WebApplication app)
    {
        var group = app.MapGroup("/api/essential-metrics")
            .WithTags("Essential Table Metrics")
            .RequireAuthorization();

        // Remover endpoint problem√°tico por enquanto
        /*
        group.MapPost("/collect", CollectTableMetrics)
            .WithSummary("Coleta m√©tricas essenciais de uma tabela")
            .WithDescription("Executa an√°lise b√°sica sem IA: contagens, completude, cardinalidade, duplicatas e estat√≠sticas descritivas");
        */

        // Coletar m√©tricas b√°sicas (vers√£o simplificada)
        group.MapPost("/collect-basic", CollectBasicTableMetrics)
            .WithSummary("Coleta m√©tricas b√°sicas de uma tabela (vers√£o r√°pida)")
            .WithDescription("Vers√£o simplificada que foca nas m√©tricas mais importantes");

        // Coletar m√©tricas avan√ßadas (an√°lise de padr√µes + outliers + rela√ß√µes)
        group.MapPost("/collect-advanced", CollectAdvancedTableMetrics)
            .WithSummary("Coleta m√©tricas avan√ßadas de uma tabela")
            .WithDescription("An√°lise de padr√µes regex, detec√ß√£o de outliers estat√≠sticos e descoberta de rela√ß√µes entre colunas");

        // Buscar outliers paginados para uma coluna espec√≠fica
        group.MapGet("/outliers/{schema}/{tableName}/{columnName}", GetOutliersPaginated)
            .WithSummary("Busca outliers paginados para uma coluna espec√≠fica")
            .WithDescription("Retorna outliers ordenados por dist√¢ncia da m√©dia com pagina√ß√£o");

        // Endpoint de teste sem autentica√ß√£o
        app.MapPost("/api/test-metrics/collect-basic", CollectBasicTableMetricsTest)
            .WithTags("Test Metrics")
            .WithSummary("Teste coleta m√©tricas b√°sicas (sem autentica√ß√£o)");

        // Endpoint de teste para m√©tricas avan√ßadas sem autentica√ß√£o
        app.MapPost("/api/test-metrics/collect-advanced", CollectAdvancedTableMetricsTest)
            .WithTags("Test Metrics")
            .WithSummary("Teste coleta m√©tricas avan√ßadas (sem autentica√ß√£o)");

        // Endpoint de teste para outliers paginados sem autentica√ß√£o
        app.MapGet("/api/test-metrics/outliers/{schema}/{tableName}/{columnName}", GetOutliersPaginatedTest)
            .WithTags("Test Metrics")
            .WithSummary("Teste outliers paginados (sem autentica√ß√£o)");

        // Endpoint simplificado para outliers paginados
        app.MapGet("/api/simple-outliers/{schema}/{tableName}/{columnName}", GetOutliersPaginatedSimple)
            .WithTags("Test Metrics")
            .WithSummary("Outliers paginados (endpoint simplificado)");

        // TODO: Implementar outros endpoints ap√≥s migration
        /*
        group.MapGet("/table/{schema}/{tableName}", GetTableMetrics)
            .WithSummary("Obt√©m m√©tricas essenciais existentes de uma tabela");

        group.MapGet("/tables", ListTablesWithMetrics)
            .WithSummary("Lista tabelas com m√©tricas essenciais coletadas");
        */
    }

    /*
    // TODO: Implementar ap√≥s migration
    private static async Task<IResult> CollectTableMetrics(...) { }
    private static async Task<IResult> GetTableMetrics(...) { }
    private static async Task<IResult> ListTablesWithMetrics(...) { }
    */

    private static async Task<IResult> CollectBasicTableMetrics(
        CollectTableMetricsRequest request,
        AppDbContext db,
        SimpleTableMetricsService simpleMetricsService,
        HttpContext httpContext)
    {
        try
        {
            var userId = GetUserId(httpContext);
            if (userId == null) return Results.Unauthorized();

            // Buscar perfil de conex√£o ativo
            var activeProfileId = httpContext.Session.GetInt32("ActiveProfileId");
            if (!activeProfileId.HasValue)
            {
                return Results.BadRequest(new { message = "Nenhum perfil de conex√£o ativo. Selecione um perfil primeiro." });
            }

            var profile = await db.Profiles.FirstOrDefaultAsync(p => p.Id == activeProfileId && p.UserId == userId);
            if (profile == null)
            {
                return Results.BadRequest(new { message = "Perfil de conex√£o n√£o encontrado." });
            }

            Console.WriteLine($"üìä Iniciando coleta de m√©tricas b√°sicas para {request.Schema}.{request.TableName}");

            // Coletar m√©tricas b√°sicas
            var metrics = await simpleMetricsService.CollectBasicMetricsAsync(
                userId.Value, profile, request.Schema, request.TableName);

            Console.WriteLine($"‚úÖ M√©tricas b√°sicas coletadas com sucesso!");

            return Results.Ok(new
            {
                success = true,
                message = "M√©tricas b√°sicas coletadas com sucesso",
                data = metrics
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Erro coletando m√©tricas b√°sicas: {ex.Message}");
            return Results.BadRequest(new
            {
                success = false,
                message = $"Erro ao coletar m√©tricas: {ex.Message}"
            });
        }
    }

    private static async Task<IResult> CollectAdvancedTableMetrics(
        CollectTableMetricsRequest request,
        AppDbContext db,
        IPatternAnalysisService patternAnalysisService,
        HttpContext httpContext)
    {
        try
        {
            var userId = GetUserId(httpContext);
            if (userId == null) return Results.Unauthorized();

            // Buscar perfil de conex√£o ativo
            var activeProfileId = httpContext.Session.GetInt32("ActiveProfileId");
            if (!activeProfileId.HasValue)
            {
                return Results.BadRequest(new { message = "Nenhum perfil de conex√£o ativo. Selecione um perfil primeiro." });
            }

            var profile = await db.Profiles.FirstOrDefaultAsync(p => p.Id == activeProfileId && p.UserId == userId);
            if (profile == null)
            {
                return Results.BadRequest(new { message = "Perfil de conex√£o n√£o encontrado." });
            }

            Console.WriteLine($"üîç Iniciando an√°lise avan√ßada para {request.Schema}.{request.TableName}");

            var connectionString = BuildConnectionString(profile);
            var startTime = DateTime.UtcNow;

            // An√°lise de padr√µes e outliers por coluna
            var columnMetrics = await patternAnalysisService.AnalyzeTablePatterns(connectionString, request.Schema, request.TableName);

            // An√°lise de rela√ß√µes entre colunas
            var relationshipMetrics = await patternAnalysisService.AnalyzeTableRelationships(connectionString, request.Schema, request.TableName);

            var processingTime = DateTime.UtcNow - startTime;

            var advancedMetrics = new AdvancedTableMetrics
            {
                TableName = request.TableName,
                SchemaName = request.Schema,
                ColumnMetrics = columnMetrics,
                RelationshipMetrics = relationshipMetrics,
                AnalysisTimestamp = DateTime.UtcNow,
                ProcessingTime = processingTime
            };

            Console.WriteLine($"‚úÖ An√°lise avan√ßada conclu√≠da em {processingTime.TotalSeconds:F2}s!");

            return Results.Ok(new
            {
                success = true,
                message = "M√©tricas avan√ßadas coletadas com sucesso",
                data = advancedMetrics,
                summary = new
                {
                    totalColumns = columnMetrics.Count,
                    columnsWithPatterns = columnMetrics.Count(c => c.PatternMatches.Any()),
                    columnsWithOutliers = columnMetrics.Count(c => c.OutlierAnalysis != null),
                    statusDateRelationships = relationshipMetrics.StatusDateRelationships.Count,
                    strongCorrelations = relationshipMetrics.NumericCorrelations.Count,
                    processingTimeSeconds = processingTime.TotalSeconds
                }
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Erro na an√°lise avan√ßada: {ex.Message}");
            return Results.BadRequest(new
            {
                success = false,
                message = $"Erro na an√°lise avan√ßada: {ex.Message}",
                details = ex.InnerException?.Message
            });
        }
    }

    private static async Task<IResult> CollectBasicTableMetricsTest(
        CollectTableMetricsRequest request,
        AppDbContext db,
        SimpleTableMetricsService simpleMetricsService)
    {
        try
        {
            Console.WriteLine($"üß™ TESTE: Iniciando coleta de m√©tricas b√°sicas para {request.Schema}.{request.TableName}");

            // Buscar primeiro perfil dispon√≠vel para teste
            var profile = await db.Profiles.FirstOrDefaultAsync();
            if (profile == null)
            {
                return Results.BadRequest(new { message = "Nenhum perfil de conex√£o encontrado para teste." });
            }

            // Simular m√©tricas b√°sicas para teste
            var basicMetrics = new
            {
                schema = request.Schema,
                tableName = request.TableName,
                collectedAt = DateTime.UtcNow,
                general = new
                {
                    totalRows = 1000,
                    totalColumns = 5,
                    estimatedSizeBytes = 50000
                },
                message = "M√©tricas simuladas para teste"
            };

            Console.WriteLine($"‚úÖ TESTE: M√©tricas b√°sicas simuladas geradas!");

            return Results.Ok(new
            {
                success = true,
                message = "M√©tricas b√°sicas de teste geradas com sucesso",
                data = basicMetrics,
                isTest = true
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå TESTE: Erro coletando m√©tricas b√°sicas: {ex.Message}");
            return Results.BadRequest(new
            {
                success = false,
                message = $"Erro ao coletar m√©tricas de teste: {ex.Message}",
                isTest = true
            });
        }
    }

    private static async Task<IResult> CollectAdvancedTableMetricsTest(
        CollectTableMetricsRequest request,
        AppDbContext db,
        IPatternAnalysisService patternAnalysisService)
    {
        try
        {
            Console.WriteLine($"üß™ TESTE AVAN√áADO: Iniciando an√°lise avan√ßada para {request.Schema}.{request.TableName}");

            // Buscar primeiro perfil dispon√≠vel para teste
            var profile = await db.Profiles.FirstOrDefaultAsync();
            if (profile == null)
            {
                return Results.BadRequest(new { message = "Nenhum perfil de conex√£o encontrado para teste." });
            }

            var connectionString = BuildConnectionString(profile);
            var startTime = DateTime.UtcNow;

            // An√°lise de padr√µes e outliers por coluna (REAL)
            var columnMetrics = await patternAnalysisService.AnalyzeTablePatterns(connectionString, request.Schema, request.TableName);

            // An√°lise de rela√ß√µes entre colunas (REAL)
            var relationshipMetrics = await patternAnalysisService.AnalyzeTableRelationships(connectionString, request.Schema, request.TableName);

            var processingTime = DateTime.UtcNow - startTime;

            var advancedMetrics = new AdvancedTableMetrics
            {
                TableName = request.TableName,
                SchemaName = request.Schema,
                ColumnMetrics = columnMetrics,
                RelationshipMetrics = relationshipMetrics,
                AnalysisTimestamp = DateTime.UtcNow,
                ProcessingTime = processingTime
            };

            Console.WriteLine($"‚úÖ TESTE AVAN√áADO: An√°lise conclu√≠da em {processingTime.TotalSeconds:F2}s!");

            return Results.Ok(new
            {
                success = true,
                message = "M√©tricas avan√ßadas de teste coletadas com sucesso",
                data = advancedMetrics,
                summary = new
                {
                    totalColumns = columnMetrics.Count,
                    columnsWithPatterns = columnMetrics.Count(c => c.PatternMatches.Any()),
                    columnsWithOutliers = columnMetrics.Count(c => c.OutlierAnalysis != null),
                    statusDateRelationships = relationshipMetrics.StatusDateRelationships.Count,
                    strongCorrelations = relationshipMetrics.NumericCorrelations.Count,
                    processingTimeSeconds = processingTime.TotalSeconds
                },
                isTest = true
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå TESTE AVAN√áADO: Erro na an√°lise: {ex.Message}");
            Console.WriteLine($"‚ùå Stack trace: {ex.StackTrace}");
            return Results.BadRequest(new
            {
                success = false,
                message = $"Erro na an√°lise avan√ßada de teste: {ex.Message}",
                details = ex.InnerException?.Message,
                isTest = true
            });
        }
    }

    private static string BuildConnectionString(ConnectionProfile profile)
    {
        return profile.Kind switch
        {
            DbKind.SqlServer => $"Server={profile.HostOrFile},{profile.Port};Database={profile.Database};User Id={profile.Username};Password={profile.Password};TrustServerCertificate=true;",
            DbKind.PostgreSql => $"Host={profile.HostOrFile};Port={profile.Port};Database={profile.Database};Username={profile.Username};Password={profile.Password};",
            DbKind.MySql => $"Server={profile.HostOrFile};Port={profile.Port};Database={profile.Database};Uid={profile.Username};Pwd={profile.Password};",
            _ => throw new NotSupportedException($"Tipo de conex√£o {profile.Kind} n√£o suportado para an√°lise avan√ßada")
        };
    }

    private static async Task<IResult> GetOutliersPaginated(
        string schema,
        string tableName,
        string columnName,
        HttpContext httpContext,
        AppDbContext dbContext,
        IPatternAnalysisService patternAnalysisService,
        int page = 0,
        int pageSize = 20)
    {
        try
        {
            var userId = GetUserId(httpContext);
            if (userId == null)
            {
                return Results.Unauthorized();
            }

            // Buscar primeiro perfil do usu√°rio (assumindo que ser√° usado o perfil principal)
            var activeProfile = await dbContext.Profiles
                .Where(p => p.UserId == userId.Value)
                .OrderByDescending(p => p.Id)
                .FirstOrDefaultAsync();

            if (activeProfile == null)
            {
                return Results.BadRequest(new { error = "Nenhum perfil de conex√£o encontrado para o usu√°rio" });
            }

            // Obter outliers paginados do servi√ßo
            using var connection = patternAnalysisService.GetType()
                .GetMethod("CreateConnection", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)?
                .Invoke(patternAnalysisService, new object[] { activeProfile.ConnectionString }) as System.Data.Common.DbConnection;

            if (connection == null)
            {
                return Results.BadRequest(new { error = "N√£o foi poss√≠vel criar conex√£o" });
            }

            await connection.OpenAsync();

            // Obter metadados das colunas
            var getTableColumnsMethod = patternAnalysisService.GetType()
                .GetMethod("GetTableColumns", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

            var columns = await (Task<List<(string ColumnName, string DataType)>>)getTableColumnsMethod!
                .Invoke(patternAnalysisService, new object[] { connection, schema, tableName })!;

            // Buscar outliers paginados
            var analyzeOutliersMethod = patternAnalysisService.GetType()
                .GetMethod("AnalyzeColumnOutliers", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

            var outlierAnalysis = await (Task<OutlierAnalysis?>)analyzeOutliersMethod!
                .Invoke(patternAnalysisService, new object[] { connection, schema, tableName, columnName, columns, page, pageSize })!;

            if (outlierAnalysis == null)
            {
                return Results.BadRequest(new { error = "Erro ao analisar outliers" });
            }

            return Results.Ok(outlierAnalysis);
        }
        catch (Exception ex)
        {
            return Results.Problem($"Erro interno: {ex.Message}");
        }
    }

    private static async Task<IResult> GetOutliersPaginatedTest(
        string schema,
        string tableName,
        string columnName,
        IPatternAnalysisService patternAnalysisService,
        AppDbContext db,
        int page = 0,
        int pageSize = 20)
    {
        try
        {
            // Buscar primeiro perfil dispon√≠vel para teste
            var profile = await db.Profiles.FirstOrDefaultAsync();
            if (profile == null)
            {
                return Results.BadRequest(new { message = "Nenhum perfil de conex√£o encontrado para teste." });
            }

            var testConnectionString = BuildConnectionString(profile);

            using var connection = patternAnalysisService.GetType()
                .GetMethod("CreateConnection", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)?
                .Invoke(patternAnalysisService, new object[] { testConnectionString }) as System.Data.Common.DbConnection;

            if (connection == null)
            {
                return Results.BadRequest(new { error = "N√£o foi poss√≠vel criar conex√£o" });
            }

            await connection.OpenAsync();

            // Obter metadados das colunas
            var getTableColumnsMethod = patternAnalysisService.GetType()
                .GetMethod("GetTableColumns", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

            var columns = await (Task<List<(string ColumnName, string DataType)>>)getTableColumnsMethod!
                .Invoke(patternAnalysisService, new object[] { connection, schema, tableName })!;

            // Buscar outliers paginados
            var analyzeOutliersMethod = patternAnalysisService.GetType()
                .GetMethod("AnalyzeColumnOutliers", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

            var outlierAnalysis = await (Task<OutlierAnalysis?>)analyzeOutliersMethod!
                .Invoke(patternAnalysisService, new object[] { connection, schema, tableName, columnName, columns, page, pageSize })!;

            if (outlierAnalysis == null)
            {
                return Results.BadRequest(new { error = "Erro ao analisar outliers" });
            }

            return Results.Ok(outlierAnalysis);
        }
        catch (Exception ex)
        {
            return Results.Problem($"Erro interno: {ex.Message}");
        }
    }

    private static async Task<IResult> GetOutliersPaginatedSimple(
        string schema,
        string tableName,
        string columnName,
        IPatternAnalysisService patternAnalysisService,
        AppDbContext db,
        int page = 0,
        int pageSize = 20)
    {
        try
        {
            // Buscar primeiro perfil dispon√≠vel para teste
            var profile = await db.Profiles.FirstOrDefaultAsync();
            if (profile == null)
            {
                return Results.BadRequest(new { message = "Nenhum perfil de conex√£o encontrado para teste." });
            }

            var connectionString = BuildConnectionString(profile);
            var result = await patternAnalysisService.AnalyzeTablePatterns(connectionString, schema, tableName);

            if (result == null)
            {
                return Results.BadRequest(new { error = "Nenhuma m√©trica encontrada" });
            }

            var columnMetric = result.FirstOrDefault(c => c.ColumnName == columnName);
            if (columnMetric?.OutlierAnalysis == null)
            {
                return Results.BadRequest(new { error = $"Nenhum outlier encontrado para a coluna {columnName}" });
            }

            var outlierAnalysis = columnMetric.OutlierAnalysis;

            // Simular pagina√ß√£o nos dados existentes
            var totalOutliers = outlierAnalysis.OutlierCount;
            var totalPages = Math.Ceiling((double)totalOutliers / pageSize);
            var startIdx = page * pageSize;

            // Para simula√ß√£o, usar os outliers de exemplo, mas com pagina√ß√£o correta
            var pagedOutliers = outlierAnalysis.OutlierRows?.Skip(startIdx).Take(pageSize).ToList() ?? new List<OutlierRowData>();

            var pagedAnalysis = new OutlierAnalysis
            {
                TotalValues = outlierAnalysis.TotalValues,
                OutlierCount = outlierAnalysis.OutlierCount,
                OutlierPercentage = outlierAnalysis.OutlierPercentage,
                Mean = outlierAnalysis.Mean,
                StandardDeviation = outlierAnalysis.StandardDeviation,
                LowerBound = outlierAnalysis.LowerBound,
                UpperBound = outlierAnalysis.UpperBound,
                SampleOutliers = pagedOutliers.Select(r =>
                    r.OutlierValue is double d ? d :
                    double.TryParse(r.OutlierValue?.ToString(), out var parsed) ? parsed : 0.0).ToList(),
                OutlierRows = pagedOutliers,
                CurrentPage = page,
                PageSize = pageSize
                // TotalPages √© calculado automaticamente baseado em OutlierCount e PageSize
            };

            return Results.Ok(pagedAnalysis);
        }
        catch (Exception ex)
        {
            return Results.Problem($"Erro interno: {ex.Message}");
        }
    }

    private static int? GetUserId(HttpContext httpContext)
    {
        var userIdClaim = httpContext.User.FindFirstValue(ClaimTypes.NameIdentifier) ??
                          httpContext.User.FindFirstValue("sub");
        return int.TryParse(userIdClaim, out var userId) ? userId : null;
    }
}

public record CollectTableMetricsRequest(
    string Schema,
    string TableName
);