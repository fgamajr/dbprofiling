using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace DbConnect.Core.Models;

[Table("dq_table_metrics")]
public class TableMetric
{
    [Key]
    public long Id { get; set; }

    [Required]
    public string SchemaName { get; set; } = string.Empty;

    [Required]
    public string TableName { get; set; } = string.Empty;

    [Required]
    public string MetricGroup { get; set; } = string.Empty;  // volume, nulls, temporal, integrity

    [Required]
    public string MetricName { get; set; } = string.Empty;   // row_count, table_size_mb, etc

    public decimal? MetricValue { get; set; }

    public DateTime CollectedAt { get; set; } = DateTime.UtcNow;
}

[Table("dq_column_metrics")]
public class ColumnMetric
{
    [Key]
    public long Id { get; set; }

    [Required]
    public string SchemaName { get; set; } = string.Empty;

    [Required]
    public string TableName { get; set; } = string.Empty;

    [Required]
    public string ColumnName { get; set; } = string.Empty;

    [Required]
    public string MetricName { get; set; } = string.Empty;   // null_rate, distinct_count, avg_len

    public decimal? MetricValue { get; set; }

    public DateTime CollectedAt { get; set; } = DateTime.UtcNow;
}

[Table("dq_preflight_results")]
public class PreflightResult
{
    [Key]
    public long Id { get; set; }

    [Required]
    public string SchemaName { get; set; } = string.Empty;

    public string? TableName { get; set; }  // NULL para testes gerais

    [Required]
    public string TestType { get; set; } = string.Empty;     // connectivity, schema_introspection, sanity

    [Required]
    public string TestName { get; set; } = string.Empty;

    [Required]
    public string SqlExecuted { get; set; } = string.Empty;

    public string? Expectation { get; set; }

    public bool Success { get; set; }

    public string? ResultData { get; set; }  // JSON string

    public string? ErrorMessage { get; set; }

    public DateTime ExecutedAt { get; set; } = DateTime.UtcNow;
}

[Table("dq_rule_candidates")]
public class RuleCandidate
{
    [Key]
    public long Id { get; set; }

    [Required]
    public string SchemaName { get; set; } = string.Empty;

    [Required]
    public string TableName { get; set; } = string.Empty;

    public string? ColumnName { get; set; }

    [Required]
    public string Dimension { get; set; } = string.Empty;     // completude, consistencia, conformidade, precisao

    [Required]
    public string RuleName { get; set; } = string.Empty;

    [Required]
    public string CheckSql { get; set; } = string.Empty;

    public string? Description { get; set; }

    public string Severity { get; set; } = "medium";  // low, medium, high, critical

    public bool AutoGenerated { get; set; } = true;

    public bool ApprovedByUser { get; set; } = false;

    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

    public List<RuleExecution> Executions { get; set; } = new();
}

[Table("dq_rule_executions")]
public class RuleExecution
{
    [Key]
    public long Id { get; set; }

    [Required]
    public long RuleCandidateId { get; set; }

    [ForeignKey(nameof(RuleCandidateId))]
    public RuleCandidate RuleCandidate { get; set; } = null!;

    public long TotalRecords { get; set; }

    public long ValidRecords { get; set; }

    public long InvalidRecords { get; set; }

    public bool Success { get; set; }

    public string? ErrorMessage { get; set; }

    public int? ExecutionTimeMs { get; set; }

    public DateTime ExecutedAt { get; set; } = DateTime.UtcNow;
}